I added a new column trip_duration_minutes

ALTER TABLE `sigma-maker-448115-v8.bike.combined_table_null_new`
ADD COLUMN trip_duration_minutes INT64;
--Adds a column to the table named trip_duration_minutes
--------------------------------------------------------------------------------------------------------------------
I formated and calculated the data for trip_duration_minutes column.

UPDATE `sigma-maker-448115-v8.bike.combined_table_null_new` t
SET t.trip_duration_minutes = TIMESTAMP_DIFF(
                                PARSE_TIMESTAMP('%H:%M:%S', t.end_time_clean), 
                                PARSE_TIMESTAMP('%H:%M:%S', t.start_time_clean), 
                                MINUTE)
WHERE t.start_time_clean IS NOT NULL 
  AND t.end_time_clean IS NOT NULL;
--Changes STRING to TIMESTAMP and calculates trip_duration_minutes
--------------------------------------------------------------------------------------------------------------------
I deleted rows where the trip_duration_minutes were calculated as 0 or a negative number.
The trip_duration_minutes got zeros or negatives, because I did the calculation after I split the dates from the times.
Next time I will calculate this information if it's relevant before I seperate the date and time columns. 
In this case it didn't change the outcome of my analysis as this query deleted three thousand rows of data, but I still had over 4 million rows to work with.

DELETE FROM `sigma-maker-448115-v8.bike.combined_table_null_new`
WHERE trip_duration_minutes <= 0;
--Deletes rows that are <=0
--------------------------------------------------------------------------------------------------------------------
I calculated the MAX trip duration for members and casual riders.

SELECT
  member_casual,  -- Group by member vs casual
  MAX(trip_duration_minutes) AS max_trip_duration_minutes  -- Get the maximum trip duration for each group
FROM `sigma-maker-448115-v8.bike.combined_table_null_new`
GROUP BY member_casual;  -- Group by member_casual to get max per group
--------------------------------------------------------------------------------------------------------------------
I calculated which season is most popular for both members and casual riders. I also formated the data as TIMESTAMP and gave each month an assigned season.

SELECT
  member_casual,
  -- Assign seasons based on month using start_date and start_time_clean
  CASE
    WHEN EXTRACT(MONTH FROM CAST(CONCAT(start_date, ' ', start_time_clean) AS TIMESTAMP)) IN (12, 1, 2) THEN 'Winter'
    WHEN EXTRACT(MONTH FROM CAST(CONCAT(start_date, ' ', start_time_clean) AS TIMESTAMP)) IN (3, 4, 5) THEN 'Spring'
    WHEN EXTRACT(MONTH FROM CAST(CONCAT(start_date, ' ', start_time_clean) AS TIMESTAMP)) IN (6, 7, 8) THEN 'Summer'
    WHEN EXTRACT(MONTH FROM CAST(CONCAT(start_date, ' ', start_time_clean) AS TIMESTAMP)) IN (9, 10, 11) THEN 'Fall'
    ELSE 'Unknown'
  END AS season,
  
  COUNT(DISTINCT ride_id) AS total_rides,  -- Total number of rides
  COUNT(DISTINCT DATE(CAST(CONCAT(start_date, ' ', start_time_clean) AS TIMESTAMP))) AS days_ridden,  -- Days the bike was used
  AVG(
    TIMESTAMP_DIFF(
      CAST(CONCAT(end_date, ' ', end_time_clean) AS TIMESTAMP), 
      CAST(CONCAT(start_date, ' ', start_time_clean) AS TIMESTAMP), 
      MINUTE
    )
  ) AS avg_trip_duration_minutes,  -- Average duration in minutes
  AVG(ST_DISTANCE(
    ST_GEOGPOINT(start_lng, start_lat),
    ST_GEOGPOINT(end_lng, end_lat)
  )) AS avg_distance_meters  -- Average distance in meters

FROM `sigma-maker-448115-v8.bike.combined_table_null_new`
WHERE start_lat IS NOT NULL
  AND start_lng IS NOT NULL
  AND end_lat IS NOT NULL
  AND end_lng IS NOT NULL
  AND start_time_clean IS NOT NULL
  AND end_time_clean IS NOT NULL
GROUP BY member_casual, season
ORDER BY member_casual, season;
--------------------------------------------------------------------------------------------------------------------
I created a table popular_ride_days_all to see which day of the week is most popular for members and casual riders.

CREATE OR REPLACE TABLE `sigma-maker-448115-v8.bike.popular_ride_days_all` AS
SELECT
  member_casual,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 1 THEN 'Sunday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 2 THEN 'Monday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 3 THEN 'Tuesday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 4 THEN 'Wednesday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 5 THEN 'Thursday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 6 THEN 'Friday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 7 THEN 'Saturday'
  END AS day_of_week,
  COUNT(DISTINCT ride_id) AS rides_count  -- Count number of rides for each day and member type
FROM `sigma-maker-448115-v8.bike.combined_table_null_new`
WHERE start_date IS NOT NULL
GROUP BY member_casual, day_of_week
ORDER BY member_casual, day_of_week;
--------------------------------------------------------------------------------------------------------------------
I calculated the distance in meters between bike pickup and drop off for both member types. 

CREATE OR REPLACE TABLE `sigma-maker-448115-v8.bike.popular_ride_days_all` AS
SELECT
  member_casual,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 1 THEN 'Sunday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 2 THEN 'Monday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 3 THEN 'Tuesday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 4 THEN 'Wednesday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 5 THEN 'Thursday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 6 THEN 'Friday'
    WHEN EXTRACT(DAYOFWEEK FROM start_date) = 7 THEN 'Saturday'
  END AS day_of_week,
  COUNT(DISTINCT ride_id) AS rides_count  -- Count number of rides for each day and member type
FROM `sigma-maker-448115-v8.bike.combined_table_null_new`
WHERE start_date IS NOT NULL
GROUP BY member_casual, day_of_week
ORDER BY member_casual, day_of_week;
